      </div>
    </div>

    <div class="card" style="margin-top:16px">
      <h3>Embedded Scripts</h3>
      <p class="small muted">Exact text copied by each “Copy Script” button. You can edit these in this HTML file.</p>
      <div id="allScripts"></div>
    </div>
  </div>

  <!--
    Embed one <script type="text/plain"> block per data set.
    Replace the placeholder text with your actual CCL extract(s).
    You can add or remove blocks and update dataSetsConfig below to match.
  -->
  <script id="ds1_script" type="text/plain">
SELECT DISTINCT
	  P_O_M.PBS_DRUG_ID ; The PBS Drug the synonym is mapped to
	, SYNONYM_ID = P_O_M.SYNONYM_ID ; The Synonym that the PBS Drug is mapped to
  , CATALOG_PRIMARY = UAR_GET_CODE_DISPLAY(O_C_S.CATALOG_CD)
	, CATALOG_MNEMONIC = O_C_S.MNEMONIC ; The Synonym mnemonic
	, CATALOG_MNEMONIC_TYPE = UAR_GET_CODE_DISPLAY(O_C_S.MNEMONIC_TYPE_CD) ; The Synonym Type
	, PBS_CODE = P_L.PBS_ITEM_CODE ; The PBS Item Code
	, PBS_PRIMARY = P_I.DRUG_NAME ; The PBS Primary Name
	, PBS_BRAND = P_D.BRAND_NAME ; The PBS Brand Name
  , PBS_FORM_STRENGTH = P_D.FORM_STRENGTH ; The PBS Form and Strength

FROM
	PBS_OCS_MAPPING   			P_O_M
	, ORDER_CATALOG_SYNONYM   	O_C_S
	, PBS_LISTING				P_L
	, PBS_ITEM					P_I
	, PBS_DRUG					P_D

PLAN P_O_M
    WHERE
    P_O_M.PBS_DRUG_ID != 11111111.00 ; Not Inactive Rows
    AND P_O_M.END_EFFECTIVE_DT_TM > SYSDATE ; Is a current mapping

JOIN O_C_S    WHERE O_C_S.SYNONYM_ID = P_O_M.SYNONYM_ID

JOIN P_D
    WHERE P_D.PBS_DRUG_ID = P_O_M.PBS_DRUG_ID
    AND P_D.END_EFFECTIVE_DT_TM > SYSDATE	; CURRENT PRODUCTS ONLY

JOIN	P_I
    WHERE	P_I.PBS_ITEM_ID = P_D.PBS_ITEM_ID

JOIN	P_L
    WHERE	P_L.PBS_LISTING_ID = P_I.PBS_LISTING_ID

ORDER BY
	P_O_M.PBS_DRUG_ID DESC

WITH TIME = 20,
	NOCOUNTER,
	SEPARATOR=" ",
	FORMAT
  </script>
  <script id="ds2_script" type="text/plain">
SELECT
  SYNONYM_ID_ = O_C_S.SYNONYM_ID ; The Synonym ID
  , CATALOG_PRIMARY = UAR_GET_CODE_DISPLAY(O_C_S.CATALOG_CD)
  , CATALOG_MNEMONIC = O_C_S.MNEMONIC ; The Synonym mnemonic
  , CATALOG_MNEMONIC_TYPE = UAR_GET_CODE_DISPLAY(O_C_S.MNEMONIC_TYPE_CD) ; The Synonym Type
FROM
    , ORDER_CATALOG_SYNONYM   	O_C_S
WHERE
  O_C_S.ACTIVE_IND = 1
  AND O_C_S.CATALOG_TYPE_CD = 2516 ; PHARMACY
WITH NOCOUNTER, SEPARATOR=" ", FORMAT, time = 20
  </script>
  
  <script>
  "use strict";

  // Configure your data sets here. Map to the embedded <script type="text/plain"> blocks above.
  const dataSetsConfig = [
    { name: "Data Set 1", scriptId: "ds1_script", data: null },
    { name: "Data Set 2", scriptId: "ds2_script", data: null }
  ];

  const container = document.getElementById('dataSetsContainer');
  const processBtn = document.getElementById('processBtn');
  const processedOutput = document.getElementById('processedOutput');
  const logEl = document.getElementById('log');
  const allScripts = document.getElementById('allScripts');

  const log = (m)=>{ logEl.textContent += (logEl.textContent?"\n":"") + m; logEl.scrollTop = logEl.scrollHeight };
  const setLog = (m)=>{ logEl.textContent = m };

  function getEmbeddedScriptText(id){
    const el = document.getElementById(id);
    return (el ? el.textContent : "").replace(/\r?\n/g, "\n").trim();
  }

  // Basic TSV parser
  function parseData(text){
    if(!text || !text.trim()) return [];
    const lines = text.replace(/\r/g,'').split('\n').filter(Boolean);
    if(lines.length<2) return [];
    const headers = lines[0].split('\t').map(s=>s.trim());
    const rows = [];
    for(let i=1;i<lines.length;i++){
      const cols = lines[i].split('\t');
      const obj = {};
      headers.forEach((h, idx)=> obj[h] = (cols[idx]??'').trim());
      rows.push(obj);
    }
    return rows;
  }

  function createTable(data){
    if(!data || !data.length) return document.createElement('div');
    const headers = Object.keys(data[0]);
    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const thr = document.createElement('tr');
    headers.forEach(h=>{ const th=document.createElement('th'); th.textContent=h; thr.appendChild(th) });
    thead.appendChild(thr); table.appendChild(thead);
    const tb = document.createElement('tbody');
    data.forEach(row=>{
      const tr = document.createElement('tr');
      headers.forEach(h=>{ const td=document.createElement('td'); td.textContent=row[h]; tr.appendChild(td) });
      tb.appendChild(tr);
    });
    table.appendChild(tb);
    return table;
  }

  function createDataSetSection(ds, index){
    const section = document.createElement('div');
    section.className = 'section';
    section.id = 'section-' + index;

    const title = document.createElement('h3');
    title.textContent = ds.name;
    section.appendChild(title);

    // Buttons
    const row = document.createElement('div'); row.className = 'row';
    const copyBtn = document.createElement('button'); copyBtn.className='btn primary'; copyBtn.textContent='Copy Script';
    const downloadBtn = document.createElement('button'); downloadBtn.className='btn'; downloadBtn.textContent='Download .ccl';
    const loadClipboardBtn = document.createElement('button'); loadClipboardBtn.className='btn'; loadClipboardBtn.textContent='Load from Clipboard';
    const pasteToggleBtn = document.createElement('button'); pasteToggleBtn.className='btn'; pasteToggleBtn.textContent='Paste Manually';
    row.append(copyBtn, downloadBtn, loadClipboardBtn, pasteToggleBtn);
    section.appendChild(row);

    // Manual paste area
    const pasteArea = document.createElement('div'); pasteArea.className='hidden'; pasteArea.style.marginTop='8px';
    const ta = document.createElement('textarea'); ta.placeholder='Paste the tab‑delimited output here, including header row...';
    const loadManual = document.createElement('button'); loadManual.className='btn'; loadManual.textContent='Load Pasted Data';
    const row2 = document.createElement('div'); row2.className='row'; row2.append(loadManual);
    pasteArea.append(ta, row2); section.appendChild(pasteArea);

    // Status + preview
    const status = document.createElement('div'); status.className='small muted'; status.textContent='No data loaded.'; section.appendChild(status);
    const viewport = document.createElement('div'); viewport.className='viewport'; const preview = document.createElement('div'); preview.id='preview-'+index; viewport.appendChild(preview); section.appendChild(viewport);

    // Wire up
    const scriptText = getEmbeddedScriptText(ds.scriptId);

    copyBtn.onclick = async()=>{
      try{
        if(navigator.clipboard && navigator.clipboard.writeText){ await navigator.clipboard.writeText(scriptText); }
        else{ const tmp=document.createElement('textarea'); tmp.value=scriptText; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); tmp.remove(); }
        log(ds.name + ': Extract script copied.');
      }catch(e){ log(ds.name + ': Copy failed. Copy from the Embedded Scripts section.'); }
    };

    downloadBtn.onclick = ()=>{
      const blob = new Blob([scriptText], {type:'text/plain'});
      const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = ds.name.toLowerCase().replace(/\s+/g,'_') + '.ccl'; a.click();
    };

    pasteToggleBtn.onclick = ()=> pasteArea.classList.toggle('hidden');

    function handleLoad(text){
      const parsed = parseData(text);
      if(!parsed.length){ status.textContent='No valid data found.'; return }
      ds.data = parsed;
      status.textContent = parsed.length + ' row(s) loaded.';
      preview.innerHTML='';
      preview.appendChild(createTable(parsed.slice(0, 400)));
      processBtn.disabled = false;
      log(ds.name + ': Data loaded.');
    }

    loadClipboardBtn.onclick = async()=>{
      try{ const text = await navigator.clipboard.readText(); handleLoad(text); }
      catch(e){ status.textContent='Clipboard read blocked by browser. Use Paste Manually.'; }
    };

    loadManual.onclick = ()=> handleLoad(ta.value);

    return section;
  }

  // Render all data set sections
  dataSetsConfig.forEach((ds, i)=> container.appendChild(createDataSetSection(ds, i)));

  // Show all embedded scripts together for quick inspection
  (function renderAllScripts(){
    dataSetsConfig.forEach((ds, i)=>{
      const box = document.createElement('div'); box.className='section';
      const h = document.createElement('h3'); h.textContent = ds.name; box.appendChild(h);
      const pre = document.createElement('pre'); const code = document.createElement('code'); code.textContent = getEmbeddedScriptText(ds.scriptId); pre.appendChild(code);
      box.appendChild(pre);
      allScripts.appendChild(box);
    });
  })();

  // Process all loaded data: simple echo tables for now
  processBtn.onclick = ()=>{
    processedOutput.innerHTML='';
    let any=false;
    dataSetsConfig.forEach(ds=>{
      if(ds.data && ds.data.length){
        any=true;
        const h=document.createElement('h3'); h.textContent = ds.name + ' • Processed Data'; processedOutput.appendChild(h);
        processedOutput.appendChild(createTable(ds.data));
      }
    });
    if(!any){ processedOutput.innerHTML='<div class="small muted">No data loaded yet.</div>'; }
    log('Processed current data sets.');
  };

  document.getElementById('clearAll').onclick = ()=>{
    dataSetsConfig.forEach(ds=> ds.data=null);
    processedOutput.innerHTML='';
    document.querySelectorAll('[id^="preview-"]').forEach(el=> el.innerHTML='');
    document.querySelectorAll('.section .small.muted').forEach((el,i)=>{ if(i%2===0) el.textContent='No data loaded.'; }); // crude but fine
    processBtn.disabled=true;
    setLog('Cleared.');
  };
  </script>
</body>
</html>
